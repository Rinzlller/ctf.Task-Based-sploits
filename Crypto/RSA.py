#!/usr/bin/env python3

import base64
import binascii
from sympy.ntheory.factor_ import totient
from Crypto.Util.number import inverse
from math import gcd

def main():
	
	e = 65537

	p = 12470414654929914531707111852531160404021485671789287313430214621271433523441431185919184160162420937662343417673059682514083222859533513744824944415657885958395283333845495936691332206498216066643445778706494337734457254731685144910774572606065659638859514502543701298724664762434067477045956222769941872828096432263857210740923241753647411783865065238590371045200057770548804357439111622609906653174999505291769895309869079218649005125134925530674563471091459513068578313243754613650333866346596578505884646483700668607980043963749366455718852722164273560913940192594326960668287492149313594164521626678731572517929620261840245505627
	q = 9
	# n = q * p
	n = 112233731894369230785364006672780443636193371046103585820871931591442901710972880673272657441461788438961090759057537142626749005735801623703424499740920973625557550004609463430221989858483944599791012008358449039610115292585166304196971153454590936749735630522893311688521982861906607293413606004929476855452867890374714896668309175782826706054785587147313339406800519934939239216952004603489159878574995547625929057788821712967841046126214329776071071239823135617617204819193791522853004797119369206552961818353306017471820395673744298101469674499478462048225461733348942646014587429343822347480694640108584152661366582356562209550643
	# q = n // p
	
	# phi = 133075794736862400686388110598570266808714052683651232655122797445099216964925703530068957607358890220696254013415564497625510160656547477386290353341301365877872031151018140890962539358215097403168452396402116271802269636497626498820406125901329433708704273662567430256232652048920492894069126553095462130720#(p-1)*(q-1)
	phi = (q - 1)*(p - 1)
	# phi = totient(n) # when N isn't prime
	
	d = inverse(e, phi)

	# c_str = "21389445315904"
	# c_int = int(c_str.encode().hex(), 16)
	c_int = int("000000407293d22503f2b1ced14cd999a6f49d23384df046544b102da2b945b1e6057189cb9d50a866b4f5c3ee37966592f475ac16ea0e940ec76020f698a9d8912a4cb0", 16)
	# c_int = 54759004599647026122514406856463259157378742086576765421244403681057296667830958496097262677746909468103297432816490414974960025967213693421040371093540798741957150802518404127189506742415632446902481096660685226143139168835776151244118812818745848450316412121438483636074283621696771442062588211105702224797096594284830392179478934633773789319724361281826846525046587704425880624392223072702388140497093800595319096777828899843167601670276914798992771993918276031148033426480942116222001562109013541640188092750398752212726596965440829166079035212641935716410853385684323732317195302607653110572864832832492308614332695688026288520379691225852762946806737257238301231217698751952484355171918946864695694585061331718299798994297433154149373824622985169040067985382226600836882257453757742535197828643434202698460569184108581507634281208686802314678004371660462919488865692183302431661256061955513742244618890434230273318857591946851400449861980175942498279589784406195234672687906617881785093459544645790910945383784867571124154943079571223415398926441026293968354045886500561571326810144583303737574480859608505324180488889170197186871175999271657954999333530291298833058735090465076060239548834720762411779404098209293580868238466921597526031645695700528053632374874845185932714808431370633811502523716823233253451786716629551331404364972256882272398057080620635036019083703322493946834189252061534859326525293003316374735791004880070727032995927925012517689373392639682427582718014579410960338409525830939648282656446532813746549464546747380511872293584924550440836335584666857767951458610836477980076516864059214230403983895530230891408789302306325203234906970983917665145158863889393533463367162504710902317594257056239723173936694745323601923224395095916354161650048792002668682709118545891847039556531344563788200718268073364636546696496449249304700845489683618878058637196637029487619802085884870782067462172988768589896393636504395939721367767239915021596943439462134035647695619496772122726337729191387011155654027977443603283338951893855590636103517011604511158111104893275895159828829025697557539673460337393857004875529156640158439781534266181143797969599285806376638562160457655232891670383782099559129401371578394437360288146260479509996113420815925580470892601019143611638145200265373771650504910779904325868578063492818604204326923531004660704531023499416374365214282656114536666455627295115405857300937775736555543797882713184445755824314743287083
	# c_int = int(open("flag.txt", "rb").read().hex(), 16)

	m_int = pow(c_int, d, n)

	print(translete(m_int))

	# n1 = 23195723482037618039558022479769915684533416401788740975676038714442515161776104706828949877988712886931168591478195524717295020262767667335011038422271910894833851508471543419355096727086541781044793767855028320518641506344374791477947531717076147134487501753091546899942446759450971736306631443797909652751570649683270267668639720066515090898778255896836459870077907100428422468024280717820729138506860629638474840252984931320037496677003813860199122152765281745406871036835033879734207462905035647525412789397040377280330836075319015834108111077445807329337093233040598913307233601846920330452353026279789872854343
	# n2 = 23195723482037618039558022479769915684533416401788740975676038714442515161776104706828949877988712886931168591478195524717295020262767667335011038422271910894833851508471543419355096727086541781044793767855028320518641506344374791477947531717076147134487501753091546899942446759450971736306631443797909653937742461920757918129195207822364515801350631202377554727243953443445240378112735060310836273184944032960854993055407011640380565660614138955949720304744368236787983404053689663315605509581645609411065577115725965753656308991444026996806586184738663009152927852502332202795463106392298862398972283655754179140151
	# print( gcd(n1, n2) )


def translete(m_int):
	try:
		m_bytes = binascii.unhexlify(hex(m_int)[2:])
	except binascii.Error:
		m_bytes = binascii.unhexlify('0'+hex(m_int)[2:])
	return m_bytes


def root(x, n):
    # Start with some reasonable bounds around the nth root.
    upper_bound = 1
    while upper_bound ** n <= x:
        upper_bound *= 2
    lower_bound = upper_bound // 2
    # Keep searching for a better result as long as the bounds make sense.
    while lower_bound < upper_bound:
        mid = (lower_bound + upper_bound) // 2
        mid_nth = mid ** n
        if lower_bound < mid and mid_nth < x:
            lower_bound = mid
        elif upper_bound > mid and mid_nth > x:
            upper_bound = mid
        else:
            # Found perfect nth root.
            return mid
    return mid + 1


if __name__ == '__main__':
    main()