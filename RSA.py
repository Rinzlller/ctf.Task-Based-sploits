#!/usr/bin/env python3

import base64
import binascii
from sympy.ntheory.factor_ import totient
from Crypto.Util.number import inverse
from math import gcd

def main():
	
	e = 65537

	# n = q * p
	p = 1972000550284100445870121306958622830045225641252954033009593459446242613031033375213304073309426202713792319087153903001608198707751563017341316136191257392659269749490809852144061763170826581018719515204465050487987949598939979468867872704976528393610305938567746277939323612907052468216732931923001246346805966071415508727723
	n = 17821369821197224755204170576717386974772583796320656477539620911939396151906969461959183978640937853223745304126597764393313271455282077396239424618606794404260667285392141808188728083834584927026023081706807877287176411455869333099599758756680824930296103562451364106123092367375221182676628604366038187928496804145884268753169728377208516981412594946003622745692274230506436281885419071635199138875290167920431573351256816462603222296067133230212113705435433321977478320363027010331451497317278086877300977556100259644050343025778299297465892385900238472919994896492369105460841980012051688350169675505544039420123
	q = n // p
	
	# phi = 133075794736862400686388110598570266808714052683651232655122797445099216964925703530068957607358890220696254013415564497625510160656547477386290353341301365877872031151018140890962539358215097403168452396402116271802269636497626498820406125901329433708704273662567430256232652048920492894069126553095462130720#(p-1)*(q-1)
	phi = (q - 1)*(p - 1)
	# phi = totient(n) # when N isn't prime
	
	d = inverse(e, phi)

	# c_str = "21389445315904"
	# c_int = int(c_str.encode().hex(), 16)
	# c_int = 194667317703687479298989188290833629421904543231503224641743768867721632949682167895699280370759100055314992068135383846690184090232092994595979623784341194946153538127175310278245722299688212621004144260665233469561373125699948009903943019071999887294005117156960295183926108287198987970959145603429337056005819069
	c_int = int(open("flag.txt", "rb").read().hex(), 16)

	m_int = pow(c_int, d, n)

	# print(translete(m_int))

	n1 = 23195723482037618039558022479769915684533416401788740975676038714442515161776104706828949877988712886931168591478195524717295020262767667335011038422271910894833851508471543419355096727086541781044793767855028320518641506344374791477947531717076147134487501753091546899942446759450971736306631443797909652751570649683270267668639720066515090898778255896836459870077907100428422468024280717820729138506860629638474840252984931320037496677003813860199122152765281745406871036835033879734207462905035647525412789397040377280330836075319015834108111077445807329337093233040598913307233601846920330452353026279789872854343
	n2 = 23195723482037618039558022479769915684533416401788740975676038714442515161776104706828949877988712886931168591478195524717295020262767667335011038422271910894833851508471543419355096727086541781044793767855028320518641506344374791477947531717076147134487501753091546899942446759450971736306631443797909653937742461920757918129195207822364515801350631202377554727243953443445240378112735060310836273184944032960854993055407011640380565660614138955949720304744368236787983404053689663315605509581645609411065577115725965753656308991444026996806586184738663009152927852502332202795463106392298862398972283655754179140151
	print( gcd(n1, n2) )


def translete(m_int):
	try:
		m_bytes = binascii.unhexlify(hex(m_int)[2:])
	except binascii.Error:
		m_bytes = binascii.unhexlify('0'+hex(m_int)[2:])
	return m_bytes


def root(x, n):
    # Start with some reasonable bounds around the nth root.
    upper_bound = 1
    while upper_bound ** n <= x:
        upper_bound *= 2
    lower_bound = upper_bound // 2
    # Keep searching for a better result as long as the bounds make sense.
    while lower_bound < upper_bound:
        mid = (lower_bound + upper_bound) // 2
        mid_nth = mid ** n
        if lower_bound < mid and mid_nth < x:
            lower_bound = mid
        elif upper_bound > mid and mid_nth > x:
            upper_bound = mid
        else:
            # Found perfect nth root.
            return mid
    return mid + 1


if __name__ == '__main__':
    main()